name: Manual Deploy to AWS

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to execute'
        required: true
        type: choice
        options:
          - plan
          - apply
        default: 'plan'

jobs:
  deploy:
    name: ${{ github.event.inputs.action }} application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: devcontrolapag-api/api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init
        working-directory: ./iac

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan'
        run: terraform plan -var-file="dev.tfvars"
        working-directory: ./iac

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve -var-file="dev.tfvars"
        working-directory: ./iac

      - name: Update ECS service to force new deployment
        if: github.event.inputs.action == 'apply'
        env:
          CLUSTER_NAME: devcontrolapag-api-cluster
          SERVICE_NAME: devcontrolapag-api-api-service
        run: |
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment --region us-east-1
