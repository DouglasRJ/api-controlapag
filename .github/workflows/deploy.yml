name: Manual Deploy or Destroy AWS Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to execute'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy
        default: 'plan'

jobs:
  terraform-plan-apply:
    name: Terraform ${{ github.event.inputs.action }}
    if:
      github.event.inputs.action == 'plan' || github.event.inputs.action ==
      'apply'
    runs-on: ubuntu-latest

    env:
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      TF_VAR_project_name: 'devcontrolapag-api'
      TF_VAR_db_instance_class: 'db.t3.micro'
      TF_VAR_ecs_cpu: '256'
      TF_VAR_ecs_memory: '512'
      TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
      TF_VAR_internal_api_token: ${{ secrets.TF_VAR_INTERNAL_API_TOKEN }}
      TF_VAR_jwt_secret: ${{ secrets.TF_VAR_JWT_SECRET }}
      TF_VAR_s3_bucket: ${{ secrets.TF_VAR_S3_BUCKET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=controlapag/dev/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}"
        working-directory: ./iac

      - name: Import existing secrets into state
        id: import-secrets
        continue-on-error: true
        run: |
          terraform import aws_secretsmanager_secret.db_password devcontrolapag-api-db-password
          terraform import aws_secretsmanager_secret.jwt_secret devcontrolapag-api-jwt-secret
          terraform import aws_secretsmanager_secret.internal_api_token devcontrolapag-api-internal-api-token
        working-directory: ./iac

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan'
        run: terraform plan
        working-directory: ./iac

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve
        working-directory: ./iac

  deploy-application:
    name: Build and Deploy Application
    needs: terraform-plan-apply
    if:
      needs.terraform-plan-apply.result == 'success' &&
      github.event.inputs.action == 'apply'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: devcontrolapag-api/api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update ECS service to force new deployment
        env:
          CLUSTER_NAME: devcontrolapag-api-cluster
          SERVICE_NAME: devcontrolapag-api-api-service
        run: |
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment --region ${{ secrets.AWS_REGION }}

  destroy:
    name: Destroy Infrastructure
    if: github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest

    env:
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      TF_VAR_project_name: 'devcontrolapag-api'
      TF_VAR_db_instance_class: 'db.t3.micro'
      TF_VAR_ecs_cpu: '256'
      TF_VAR_ecs_memory: '512'
      TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
      TF_VAR_internal_api_token: ${{ secrets.TF_VAR_INTERNAL_API_TOKEN }}
      TF_VAR_jwt_secret: ${{ secrets.TF_VAR_JWT_SECRET }}
      TF_VAR_s3_bucket: ${{ secrets.TF_VAR_S3_BUCKET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=controlapag/dev/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}"
        working-directory: ./iac

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./iac
